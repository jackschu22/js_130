/*
Build an inventory management system:
- item creator
  - makes sure necessary item info is valid
- item manager
  - creates items, updates info, deletes items, queries item info
- report manager
  - generates report for an item or ALL items
  - reports generated by report objects created from report manager

Item Creator:
- Item SKU code: first 3 letters of item and  first 2 letters of category
    - If the item name consists of two words and the first word consists of two letters only, the next letter is taken from the next word.
- Item name: at least 5 chars, spaces don't count towards count
- Item category: at least 5 chars, one word
- Item quantity: must not be blank

Item Manager:
- create: This method creates a new item. Returns false if creation is not successful.
- update: This method accepts an SKU Code and an object as an argument and updates any of the information on an item. You may assume valid values will be provided.
- delete: This method accepts an SKU Code and deletes the item from the list. You may assume a valid SKU code is provided.
- items: This property contains a list of all the items.
- inStock: This method list all the items that have a quantity greater than 0.
- itemsInCategory: This method list all the items for a given category

Report Manager:
- init: This method accepts the ItemManager object as an argument and assigns it to the items property.
- createReporter: This method accepts an SKU code as an argument and returns an object. The returned object has one method, itemInfo. 
It logs to the console all the properties of an object as "key:value" pairs (one pair per line).
- reportInStock: Logs to the console the item names of all the items that are in stock as a comma separated values.

Rules:
- Each required piece of information for an item corresponds to one property.
- The created item objects should not have any methods/properties on them other than the required information above and those inherited from Object.prototype.
- If any of the require information provided is not valid, the item creator returns an object with a notValid property with a value of true.

Data Structures:
- item represented by object { sku, name, category, quantity}
- each item referenced by sku in `items` object

Algorithm:

ItemManager class
- static property `items`, empty object
  - each item identified by SKU
- static method `infoIsValid`
  - input: name, category, quantity
  - output: boolean
  - remove spaces from name, if length < 5, return false
  - return false if category is > 1 word or < 5 letters
  - return false if quantity is undefined
- static method `generateSKU`
  - input: name, category
  - output: string
  - remove spaces from name
  - return first 3 letters of name + first 2 letters of category
- static method `create`
  - input: name, category, quantity
  - if info is valid, generate sku and add info in object to `items`
  - otherwise return invalid object
- static method `update`
  - input: sku code (string), new quantity ({quantity: #})
  - coerce argument sku code to lowercase
  - copy quantity property from argument object to entry in `items` corresponding to argument sku code
- static method `inStock`
  - input: nothing
  - return list with item objects that have quantity > 0

ReportManager class
- static property `items`, empty object
- static method `init`
  - input: ItemManager object
  - copy elements from `items` in `ItemManager` to `items` in `ReportManager`
- static method `reportInStock`
  - iterate through `items`, log name property of entries with quantity > 0

*/

class ItemManager {
  static items = {};

  static infoIsValid(name, category, quantity) {
    let nameWithoutSpaces = name.split(' '). join('');
    if (nameWithoutSpaces.length < 5) return false;
    if (category.split(' ').length > 1 || category.length < 5) return false;
    if (quantity === undefined) return false;
    return true;
  }

  static generateSKU(name, category) {
    let nameWithoutSpaces = name.split(' '). join('');
    let productSKU = nameWithoutSpaces.slice(0, 3) + category.slice(0, 2);
    return productSKU;
  }

  static create(name, category, quantity) {
    if (ItemManager.infoIsValid(name, category, quantity)) {
      let productSKU = ItemManager.generateSKU(name, category, quantity);
      ItemManager.items[productSKU] = { name, category, quantity };
    } else {
      return {notValid: true};
    }
  }

  static update(productSKU, newQuantityObj) {
    Object.assign(ItemManager.items[productSKU.toLowerCase()], newQuantityObj);
  }

  static inStock() {
    let availableItems = [];
    for (let productSKU in ItemManager.items) {
      let item = ItemManager.items[productSKU];
      if (item.quantity > 0) {
        availableItems.push(item);
      }
    }
    return availableItems;
  }
}

class ReportManager {
  static items = {};

  static init(itemManager) {
    ReportManager.items = { ...itemManager.items };
  }

  static reportInStock() {
    for (let item in ReportManager.items) {
      let itemDetails = ReportManager.items[item];
      if (itemDetails.quantity > 0) {
        console.log(itemDetails.name);
      }
    }
  }
}

ItemManager.create('basket ball', 'sports', 0);           // valid item
ItemManager.create('asd', 'sports', 0);
ItemManager.create('soccer ball', 'sports', 5);           // valid item
ItemManager.create('football', 'sports');
ItemManager.create('football', 'sports', 3);              // valid item
ItemManager.create('kitchen pot', 'cooking items', 0);
ItemManager.create('kitchen pot', 'cooking', 3);          // valid item
// returns list with the 4 valid items
console.log(ItemManager.items);

ReportManager.init(ItemManager);
// logs soccer ball,football,kitchen pot
ReportManager.reportInStock();

ItemManager.update('SOCSP', { quantity: 0 });
// returns list with the item objects for football and kitchen pot
ItemManager.inStock();
// football,kitchen pot
// ReportManager.reportInStock();

// // returns list with the item objects for basket ball, soccer ball, and football
// ItemManager.itemsInCategory('sports');

// ItemManager.delete('SOCSP');
// // returns list the remaining 3 valid items (soccer ball is removed from the list)
// ItemManager.items;

// let kitchenPotReporter = ReportManager.createReporter('KITCO');
// kitchenPotReporter.itemInfo();
// // logs
// // skuCode: KITCO
// // itemName: kitchen pot
// // category: cooking
// // quantity: 3

// ItemManager.update('KITCO', { quantity: 10 });
// kitchenPotReporter.itemInfo();
// // logs
// // skuCode: KITCO
// // itemName: kitchen pot
// // category: cooking
// // quantity: 10